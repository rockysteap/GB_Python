# # List comprehension - Генератор списков

# 1. Простая ситуация — список:
    # list_1 = [exp for item in iterable]
# 2. Выборка по заданному условию:
    # list_1 = [exp for item in iterable (if conditional)]

# Задача:
# Создать список, состоящий из четных чисел в диапазоне от 1 до 100.
# Решение:
# 1. Создать список чисел от 1 до 100
# list_1 = []
# for i in range(1, 101):
#     list_1.append(i)
# print(list_1)  # [1, 2, 3,..., 100]

# Эту же функцию можно записать так:
# list_1 = [i for i in range(1, 101)]
# print(list_1)  # [1, 2, 3,..., 100]

# 2. Добавить условие (только чётные числа)
# list_1 = [i for i in range(1, 101) if i % 2 == 0]  # [2, 4, 6,..., 100]

# Допустим, вы решили создать пары каждому из чисел (кортежи)
# list_1 = [(i, i) for i in range(1, 101) if i % 2 == 0]  # [(2, 2), (4, 4),..., (100, 100)]

# Также можно умножать, делить, прибавлять, вычитать. Например, умножить значение на 2.
# list_1 = [i * 2 for i in range(10) if i % 2 == 0]

# print(list_1)

# # # Еще примеры
# # списковое включение, выдаёт [2, 3, 4]
# [x + 1 for x in (1, 2, 3)]
#
# # генераторное выражение, выдаст 2, затем 3, затем 4
# (x + 1 for x in (1, 2, 3))
#
# # списковое включение с фильтром выдаёт [2]
# [x for x in (1, 2, 3) if x % 2 == 0]
#
# # списковое включение с тройкой
# [x + 1 if x % 2 == 0 else x for x in (1, 2, 3)]
#
# # списковое включение с тройкой и фильтрацией
# [x + 1 if x % 2 == 0 else x for x in range(-3,4) if x > 0]
#
# # комплект выражений, выдаёт {1, 2, 3}
# {x for x in (1, 2, 2, 3)}
#
# # словарь включений, выдаёт {'a': 1, 'b': 2} (python 2.7+ and 3.0+ only)
# {k: v for k, v in [('a', 1),('b', 2)]}
#
# # Вложенные циклы, дает [11, 21, 12, 22]
# [x + y for x in [1, 2] for y in [10, 20]]
#
# # Состояние проверено на 1-й петле
# [x + y for x in [1, 2, 3] if x > 2 for y in [3, 4, 5]]
#
# # Состояние проверено на 2-й петле
# [x + y for x in [1, 2, 3] for y in [3, 4, 5] if x > 2]
#
# # Условие проверено, если зацикленные числа нечётные
# [x for x in xrange(10) if x % 2 == 0]